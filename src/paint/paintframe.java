package paint;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics2D;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import javax.swing.JColorChooser;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import paint.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;

public class paintframe extends javax.swing.JFrame {

    private int mX, mY;
    private double Xnew, Ynew, Xold, Yold;
    Rectangle2D s_rectangle;
    Ellipse2D s_ellipse;
    Canvas ca = new Canvas();
    Shape sh;
    int mode = 0;
    int draw = 0;
    public int temp = 0;
    Line line;
    Line2D line2d;
    private Graphics g = getGraphics();
    private Graphics2D g2 = null;
    int xp, yp, xd, yd, xr, yr;
    Shape selected = null;
    public Color color = Color.BLACK;
    public String path = null;
    public int vnumber = 0;
    Triangle triangle;
    Pentagon pentagon;
    int[] x_tri;
    int[] y_tri;
    int i_tri;
    int[] x_pent;
    int[] y_pent;
    int i_pent;
    Resizeboxes around;
    int move = 0;
    int resize = 0;
    int mode_resize;
    public Stroke stroke;
    MouseEvent ex;
    MouseListener el;
    boolean flag = false;
    Text a;
    int undoflag;
    int redoflag;
    int redoindex;
    Object extra;
    int count;
    int Size;
    Text old;
    double oldx;
    double oldy;
    int mflag;
    int nflag;

    public paintframe() {
        initComponents();
        Toolkit tk = Toolkit.getDefaultToolkit();
        int xsize = (int) tk.getScreenSize().getWidth();
        int ysize = (int) tk.getScreenSize().getHeight();
        this.setSize(xsize, ysize);
        setIconImage(Toolkit.getDefaultToolkit().createImage(getClass().getResource("p2.png")));
        jPanel7.add(ca, BorderLayout.CENTER);
        System.out.println(color);
        TextPanel.setVisible(false);
        jPanel8.setVisible(true);
        //jPanel11.setVisible(false);
        stroke = new BasicStroke((float) slider.getValue());
        x_tri = new int[4];
        y_tri = new int[4];
        i_tri = 0;
        x_pent = new int[6];
        y_pent = new int[6];
        i_pent = 0;
        btn_delete.setEnabled(false);
        btn_move.setEnabled(false);
        btn_resize.setEnabled(false);
        btn_gmove.setEnabled(false);
        btn_gselect.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //public void paint1(Graphics g) {
        //g.setColor(Color.blue);
      //  g.fillOval(mX, mY, 5, 5);
    //}
    public void painttext(Graphics g) {
        if (flag) {
            Size = SizeCombo.getSelectedIndex();
            Size += 10;
            a = new Text(txt_text.getText(), TypeCombo.getSelectedItem().toString(), Size, 0, 0);
            System.out.println(TypeCombo.getSelectedItem() + " " + Size);
            ca.text.add(a);
            ca.s1.push(a);
            count = 0;
            repaint();
            txt_text.setText("");
            System.out.println("Entered!");
        }

    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        btn_tri = new javax.swing.JToggleButton();
        btn_pentagon = new javax.swing.JToggleButton();
        btnoval = new javax.swing.JButton();
        btnrect = new javax.swing.JButton();
        btnsquare = new javax.swing.JButton();
        btncircle = new javax.swing.JButton();
        btn_line = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        btn_pen = new javax.swing.JToggleButton();
        btn_eraser = new javax.swing.JToggleButton();
        btn_ink = new javax.swing.JToggleButton();
        btn_brush = new javax.swing.JToggleButton();
        btn_fill = new javax.swing.JToggleButton();
        btn_text = new javax.swing.JToggleButton();
        btn_3d = new javax.swing.JToggleButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btn_save = new javax.swing.JButton();
        btn_load = new javax.swing.JButton();
        btn_undo = new javax.swing.JButton();
        btn_redo = new javax.swing.JButton();
        btn_selectall = new javax.swing.JButton();
        btn_select = new javax.swing.JButton();
        btn_resize = new javax.swing.JButton();
        btn_move = new javax.swing.JButton();
        btn_clear = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        lbl_value = new javax.swing.JLabel();
        lbl_slider = new javax.swing.JLabel();
        slider = new javax.swing.JSlider();
        btn_delete = new javax.swing.JButton();
        btn_color = new javax.swing.JButton();
        btn_gselect = new javax.swing.JToggleButton();
        btn_gmove = new javax.swing.JToggleButton();
        jPanel7 = new javax.swing.JPanel();
        TextPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        SizeCombo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        TypeCombo = new javax.swing.JComboBox();
        txt_text = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btn_done = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Paint");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setPreferredSize(new java.awt.Dimension(100, 400));

        btn_tri.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Triangle-icon.png"))); // NOI18N
        btn_tri.setToolTipText("Triangle");
        btn_tri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_triActionPerformed(evt);
            }
        });

        btn_pentagon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/pentagon-icon.png"))); // NOI18N
        btn_pentagon.setToolTipText("Pentagon");
        btn_pentagon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pentagonActionPerformed(evt);
            }
        });

        btnoval.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Ellipse-tool-icon.png"))); // NOI18N
        btnoval.setToolTipText("Oval");
        btnoval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnovalActionPerformed(evt);
            }
        });

        btnrect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/rectangle-icon.png"))); // NOI18N
        btnrect.setToolTipText("Rectangle");
        btnrect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrectActionPerformed(evt);
            }
        });

        btnsquare.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/square-icon.png"))); // NOI18N
        btnsquare.setToolTipText("Square");
        btnsquare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsquareActionPerformed(evt);
            }
        });

        btncircle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Circle-icon.png"))); // NOI18N
        btncircle.setToolTipText("Circle");
        btncircle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncircleActionPerformed(evt);
            }
        });

        btn_line.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Line-icon.png"))); // NOI18N
        btn_line.setToolTipText("Line");
        btn_line.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_lineActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btncircle, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnsquare, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnrect, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnoval, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_tri, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_pentagon, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_line))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btn_line, btn_pentagon, btn_tri, btncircle, btnoval, btnrect, btnsquare});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_line, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btncircle, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnsquare)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnrect, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnoval, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_tri, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_pentagon, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btn_line, btn_pentagon, btn_tri, btncircle, btnoval, btnrect, btnsquare});

        getContentPane().add(jPanel3, java.awt.BorderLayout.LINE_END);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(160, 250));

        btn_pen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Pen-Red-icon.png"))); // NOI18N
        btn_pen.setToolTipText("Pencil");
        btn_pen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_penActionPerformed(evt);
            }
        });

        btn_eraser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Actions-draw-eraser-icon.png"))); // NOI18N
        btn_eraser.setToolTipText("Eraser");
        btn_eraser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eraserActionPerformed(evt);
            }
        });

        btn_ink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Color-picker-icon.png"))); // NOI18N
        btn_ink.setToolTipText("Color Picker");
        btn_ink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_inkActionPerformed(evt);
            }
        });

        btn_brush.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Brush-icon.png"))); // NOI18N
        btn_brush.setToolTipText("Brush");
        btn_brush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_brushActionPerformed(evt);
            }
        });

        btn_fill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Paint-icon.png"))); // NOI18N
        btn_fill.setToolTipText("Fill Bucket");
        btn_fill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_fillActionPerformed(evt);
            }
        });

        btn_text.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Text-edit-icon.png"))); // NOI18N
        btn_text.setToolTipText("Text");
        btn_text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_textActionPerformed(evt);
            }
        });

        btn_3d.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/layer-grid-icon.png"))); // NOI18N
        btn_3d.setToolTipText("3D Lines");
        btn_3d.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_3dActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btn_3d, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_eraser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_fill, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btn_brush, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_pen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_ink, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_text, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btn_brush, btn_ink, btn_pen, btn_text});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_ink, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_pen, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_brush, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_text, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btn_fill, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_eraser, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_3d, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(159, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btn_brush, btn_ink, btn_pen});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btn_3d, btn_eraser, btn_fill});

        getContentPane().add(jPanel1, java.awt.BorderLayout.LINE_START);

        jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(255, 255, 255), null, null));
        jPanel4.setPreferredSize(new java.awt.Dimension(469, 118));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btn_save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Hardware-Floppy-icon.png"))); // NOI18N
        btn_save.setToolTipText("Save");
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        btn_load.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/folders-open-icon.png"))); // NOI18N
        btn_load.setToolTipText("Open");
        btn_load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_loadActionPerformed(evt);
            }
        });

        btn_undo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/undo-icon.png"))); // NOI18N
        btn_undo.setToolTipText("Undo");
        btn_undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_undoActionPerformed(evt);
            }
        });

        btn_redo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/redo-icon.png"))); // NOI18N
        btn_redo.setToolTipText("Redo");
        btn_redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_redoActionPerformed(evt);
            }
        });

        btn_selectall.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Actions-select-rectangular-icon.png"))); // NOI18N
        btn_selectall.setToolTipText("Select ALL");
        btn_selectall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_selectallActionPerformed(evt);
            }
        });

        btn_select.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/select-invert-icon.png"))); // NOI18N
        btn_select.setToolTipText("Select");
        btn_select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_selectActionPerformed(evt);
            }
        });

        btn_resize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/layer-resize-icon.png"))); // NOI18N
        btn_resize.setToolTipText("Resize");
        btn_resize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_resizeActionPerformed(evt);
            }
        });

        btn_move.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/move-icon.png"))); // NOI18N
        btn_move.setToolTipText("Move");
        btn_move.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_moveActionPerformed(evt);
            }
        });

        btn_clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Clear-icon.png"))); // NOI18N
        btn_clear.setToolTipText("Clear All");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        lbl_value.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbl_value.setText("5");

        lbl_slider.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbl_slider.setText("Size :-");

        slider.setMajorTickSpacing(1);
        slider.setMaximum(10);
        slider.setPaintTicks(true);
        slider.setSnapToTicks(true);
        slider.setToolTipText("Stroke");
        slider.setValue(5);
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(lbl_slider)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbl_value, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 24, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_slider)
                    .addComponent(lbl_value))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btn_delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Sign-Error-icon.png"))); // NOI18N
        btn_delete.setToolTipText("Delete Shape");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_color.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/preferences-color-icon.png"))); // NOI18N
        btn_color.setToolTipText("Colors");
        btn_color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_colorActionPerformed(evt);
            }
        });

        btn_gselect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/category-group-select-icon.png"))); // NOI18N
        btn_gselect.setToolTipText("Group Select");
        btn_gselect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_gselectActionPerformed(evt);
            }
        });

        btn_gmove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/shape-move-front-icon.png"))); // NOI18N
        btn_gmove.setToolTipText("Group Move");
        btn_gmove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_gmoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_save)
                .addGap(10, 10, 10)
                .addComponent(btn_load, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_undo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_redo, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_selectall)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_select, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_resize, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_move, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_gmove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_gselect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_color, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btn_clear, btn_delete, btn_gmove, btn_gselect, btn_load, btn_move, btn_redo, btn_resize, btn_save, btn_select, btn_selectall, btn_undo});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_color, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_resize, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(btn_redo, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(btn_undo, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(btn_selectall, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(btn_select, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(btn_move, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(btn_gmove)
                    .addComponent(btn_clear, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(btn_delete, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(btn_save, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(btn_load, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(btn_gselect)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btn_clear, btn_delete, btn_gmove, btn_gselect, btn_load, btn_move, btn_redo, btn_resize, btn_save, btn_select, btn_selectall, btn_undo});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btn_color, jPanel8});

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jPanel7.setDoubleBuffered(false);
        jPanel7.setPreferredSize(new java.awt.Dimension(490, 400));
        jPanel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel7MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel7MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel7MouseReleased(evt);
            }
        });
        jPanel7.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel7MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel7MouseMoved(evt);
            }
        });
        jPanel7.setLayout(new java.awt.BorderLayout());

        TextPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setText("Font Size :");

        SizeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "11", "12", "13", "14", "15", "16", "17", "18" }));

        jLabel3.setText("Font Type :");

        TypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Plain", "Bold", "Italic" }));

        txt_text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_textActionPerformed(evt);
            }
        });

        jLabel4.setText("Enter Text :-");

        btn_done.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Ok-icon.png"))); // NOI18N
        btn_done.setToolTipText("Done");
        btn_done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_doneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TextPanelLayout = new javax.swing.GroupLayout(TextPanel);
        TextPanel.setLayout(TextPanelLayout);
        TextPanelLayout.setHorizontalGroup(
            TextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TextPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_text, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(TextPanelLayout.createSequentialGroup()
                        .addGroup(TextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(TextPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(SizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(TextPanelLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TextPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_done)
                .addGap(28, 28, 28))
        );
        TextPanelLayout.setVerticalGroup(
            TextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TextPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(TextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(TextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(TypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btn_done)
                .addContainerGap(350, Short.MAX_VALUE))
        );

        jPanel7.add(TextPanel, java.awt.BorderLayout.LINE_START);

        getContentPane().add(jPanel7, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Hardware-Floppy-icon (1).png"))); // NOI18N
        jMenuItem1.setText("Save");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/folders-open-icon (1).png"))); // NOI18N
        jMenuItem2.setText("Open");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/undo-icon (1).png"))); // NOI18N
        jMenuItem3.setText("Undo");
        jMenu2.add(jMenuItem3);

        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/redo-icon (1).png"))); // NOI18N
        jMenuItem4.setText("redo");
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        JFileChooser fs = new JFileChooser();
        fs.showOpenDialog(this);

        if (fs.getSelectedFile() != null) {
            String path = fs.getSelectedFile().getPath();
            try {
                SaveLoad sl = new SaveLoad();
                ca.shapes = sl.load(path);
                ca.repaint();
            } catch (ParserConfigurationException | IOException | SAXException e4) {
                Logger.getLogger(paintframe.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void btn_brushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_brushActionPerformed
        // TODO add your handling code here:
        if (btn_brush.isSelected()) {
            mode = 3;
            draw = 2;

            btn_3d.setSelected(false);
            btn_line.setSelected(false);
            btn_ink.setSelected(false);
            btn_pen.setSelected(false);
            btn_fill.setSelected(false);
            btn_text.setSelected(false);
            btn_eraser.setSelected(false);
            btn_pentagon.setSelected(false);
            btn_tri.setSelected(false);
        } else {
            mode = 0;
            draw = 0;
        }
    }//GEN-LAST:event_btn_brushActionPerformed

    private void btn_inkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_inkActionPerformed
        if (btn_ink.isSelected()) {
            mode = 8;
            draw = 3;
            btn_3d.setSelected(false);
            btn_line.setSelected(false);
            btn_pen.setSelected(false);
            btn_brush.setSelected(false);
            btn_fill.setSelected(false);
            btn_text.setSelected(false);
            btn_eraser.setSelected(false);
            btn_pentagon.setSelected(false);
            btn_tri.setSelected(false);
        } else {
            draw = 0;
            mode = 0;
        }    }//GEN-LAST:event_btn_inkActionPerformed

    private void btn_penActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_penActionPerformed
        if (btn_pen.isSelected()) {
            mode = 2;
            draw = 2;
            btn_3d.setSelected(false);
            btn_line.setSelected(false);
            btn_ink.setSelected(false);
            btn_brush.setSelected(false);
            btn_fill.setSelected(false);
            btn_text.setSelected(false);
            btn_eraser.setSelected(false);
            btn_pentagon.setSelected(false);
            btn_tri.setSelected(false);

        } else {
            mode = 0;
            draw = 0;
        }
    }//GEN-LAST:event_btn_penActionPerformed

    private void jPanel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel7MouseClicked
        if (mode == 8 && draw == 3) {
            if (evt.getPoint().getX() > ca.getX()) {
                int m = ca.shapes.size();
                Xnew = evt.getPoint().getX();
                Ynew = evt.getPoint().getY();
                boolean st = false;
                while (m > 0) {
                    //st=false;
                    sh = ca.shapes.get(m - 1);
                    st = sh.ContPt(sh, (int) Xnew, (int) Ynew);
                    if (st == true) {
                        selected = sh;
                        break;
                    }
                    m--;
                }
                if (st == false) {
                    m = ca.filled.size();
                    while (m > 0) {
                        //st=false;
                        m=ca.filled.size();
                        sh = ca.filled.get(m - 1);
                        st = sh.ContPt(sh, (int) Xnew, (int) Ynew);
                        if (st == true) {
                            selected = sh;
                            break;
                        }
                        m--;
                    }
                }
                if (st == true) {
                    color = selected.getColor();
                } else {

                   // jTextField1.setText("Nour");
                    //ca.paintComponent(g2);
                    int XP = (int) evt.getPoint().getX();
                    int YP = (int) evt.getPoint().getX();
                    BufferedImage bf = new BufferedImage(ca.getWidth(), ca.getHeight(), BufferedImage.TYPE_INT_RGB);

                    Graphics2D g2D1 = (Graphics2D) bf.getGraphics();
                    //bf=ImageIO.read();
                    ca.paintComponent(g2D1);
                    //repaint();
                    int c;
                    c = bf.getRGB(XP, YP);

                    int red = (c & 0x00ff0000) >> 16;
                    int green = (c & 0x0000ff00) >> 8;
                    int blue = c & 0x000000ff;
// and the Java Color is ...
                    color = new Color(red, green, blue);
                    System.out.println(ca.getWidth() + "v" + ca.getHeight() + "v" + jPanel7.getHeight() + "v" + jPanel7.getHeight());
                    System.out.println(XP + "ggggggggggggg" + YP + "gggggggggggg" + color + "" + red + "" + green + "" + blue + "" + c);
                    //repaint();
                    btn_ink.setSelected(false);
                    draw = 0;
                }

            }
        } else if (mode == 15 && draw == 3) {
            int m = ca.shapes.size();
            Xnew = evt.getPoint().getX();
            Ynew = evt.getPoint().getY();
            boolean st = false;
            while (m > 0) {
                //st=false;
                sh = ca.shapes.get(m - 1);
                st = sh.ContPt(sh, (int) Xnew, (int) Ynew);
                if (st == true) {
                    break;
                }
                m--;
            }
            if (st == true) {
                this.setCursor(new Cursor(Cursor.HAND_CURSOR));
                selected = sh;
                ca.shapes.remove(m - 1);
                if (sh instanceof Circle) {
                    stroke = new BasicStroke((float) slider.getValue());
                    Circle c = new Circle(selected.getX(), selected.getY(), color, ((Circle) selected).getRadius(), stroke);
                    ca.filled.add(c);
                    repaint();

                } else if (sh instanceof Rectangle) {
                    stroke = new BasicStroke((float) slider.getValue());
                    Rectangle r = new Rectangle(selected.getX(), selected.getY(), color,
                            ((Rectangle) sh).getLength(), ((Rectangle) sh).getWidth(), stroke);

                    ca.filled.add(r);
                    repaint();
                } else if (sh instanceof Oval) {
                    stroke = new BasicStroke((float) slider.getValue());
                    Oval o = new Oval(selected.getX(), selected.getY(), color, ((Oval) sh).getH_radius(), ((Oval) selected).getV_radius(), stroke);
                    ca.filled.add(o);
                    repaint();

                } else if (sh instanceof Square) {
                    stroke = new BasicStroke((float) slider.getValue());
                    Square s = new Square(selected.getX(), selected.getY(), color, ((Square) selected).getSide(), stroke);
                    ca.filled.add(s);
                    repaint();

                }

            } else {
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
            btn_fill.setSelected(false);
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            draw = 0;
        }
        
        if (mode == 7&&draw ==4) {

            //if (count == 0) {
              //  old= new Text(textbox.getText(), TypeCombo.getSelectedItem().toString(), Size, 0, 0);
          //      ca.s1.push((Object) (old));
            //} else {
              //  old = new Text(textbox.getText(), TypeCombo.getSelectedItem().toString(), Size, oldx, oldy);
                //ca.s1.push((Object) (old));
            //}
            //ca.s1.push(a);
            //System.out.println(a.x + " " + a.y);
            //oldx = (double) (evt.getPoint().getX());
            //oldy = (double) (evt.getPoint().getY());

            a.setx((double) (evt.getPoint().getX()));
            a.sety((double) (evt.getPoint().getY()));
            //System.out.println("a.x" + a.x + " a.y " + a.y);
            //ca.s1.push(a);
            //undoflag = 100;
            //if (count == 0) {
              //  undoflag = 5;
            //}
            //count++;
            repaint();
            draw = 0;
            //jTextField1.setText("er7amoona");
        } else if (mode == 12&&draw ==4) {
            double x1;
            double y1;
            x1 = (evt.getPoint().getX());
            y1 = (evt.getPoint().getY());
            System.out.println(x1+","+y1);
            int m = ca.shapes.size();
            System.out.println("size:"+m);
            boolean st = false;
            while (m > 0) {
                //st=false;
                sh = ca.shapes.get(m - 1);
                st = sh.ContPt(sh, (int) x1, (int) y1);
                if (st == true) {
                    ca.selectedshapes.add(sh);
                    System.out.println("is selected");
                    /*if (sh.x>maxx)
                        maxx=sh.x;
                    if (sh.y>maxy)
                        maxy=sh.y;*/
                }
                m--;
            }
            
            
        repaint();
        }
        else if (mode == 13&&draw ==4) {
       
            int m = ca.selectedshapes.size();
            //int n = ca.selectedshapes.size();
            int i;
            int xi;
            int yi;
            double xp;
            double yp;
            double xdiff=0;
            double ydiff=0;
            
            int count=0;

            while (m > 0) {
                sh = ca.selectedshapes.get(m - 1);
                //while (n<0)
                {
                    i = ca.shapes.indexOf(sh);
                    //System.out.println("index of shape"+i);
                    
                    xi = ca.shapes.get(i).getX();
                    xp = (evt.getPoint().getX());
                   
                    yi = ca.shapes.get(i).getY();
                    yp = (evt.getPoint().getY());
                    if (count ==0 ){
                    xdiff =xp-xi;
                    //System.out.println("deltax "+xdiff);
                    ydiff= yp-yi;
                    //System.out.println("deltay "+ydiff);
                    count++;
                    }
                    Shape sha = ca.shapes.get(i);
                    sha.setX(sha.getX()+(int)xdiff);
                    sha.setY(sha.getY()+(int)ydiff);
                    ca.shapes.set(i, sha);
                    //n--;
                }
                m--;
            }
            repaint();
        }
        if (mode == 3 && draw == 2) {
            stroke = new BasicStroke((float) slider.getValue());
            temp = 1;
            mX = (int) evt.getPoint().getX();
            mY = (int) evt.getPoint().getY();
            sh = new Circle(mX, mY, color, slider.getValue(), stroke);
            ca.tools.add(sh);
            ca.s1.push(sh);
            undoflag=2;
            ca.s1.push(undoflag);
            repaint();
        }
        else if (mode == 0 && draw == 2) {
            //jTextField1.setText("farida");
            //ca.x.fillRect(100, 100, 20, 10);
            //sh.drawfill(ca.x);
            //sh.drawfillrect(sh);

            //jTextField1.setText("MMMM");
            Xnew = evt.getPoint().getX();
            Ynew = evt.getPoint().getY();
            System.out.println(Xnew + "," + Ynew);
            int m = ca.shapes.size();
            boolean st = false;
            while (m > 0) {
                //st=false;
                sh = ca.shapes.get(m - 1);
                st = sh.ContPt(sh, (int) Xnew, (int) Ynew);
                if (st == true) {
                    break;
                }
                m--;
            }
            if (st == true) {
                this.setCursor(new Cursor(Cursor.HAND_CURSOR));
                selected = sh;
            } else {
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }

            repaint();
        } 

        
        if (ca.select == 1 && draw == 1) {
            //jTextField1.setText("mouse clicked");
           // jTextField1.setText("selected");
            int m = ca.shapes.size();
            boolean st = false;
            while (m > 0) {
                //st=false;
                sh = ca.shapes.get(m - 1);
                st = sh.ContPt(sh, (int) Xnew, (int) Ynew);
                System.out.println(st +","+ ca.shapes.size());
                if (st == true) {
                    break;
                }
                m--;
            }
            //jTextField1.setText(Integer.toString(ca.selected.size()) + Integer.toString(ca.shapes.size()));
            if (st == true) {
            //jTextField1.setText("check");
                //Color tmp = sh.color;
                //sh.color = Color.orange;
                ca.selected.add(sh);
                ca.shapes.remove(sh);
                //jTextField1.setText(Integer.toString(ca.selected.size()) + Integer.toString(ca.shapes.size()));
                repaint();
                if (sh instanceof Rectangle) {
                    around = new Resizeboxes(sh.getX() - 3, sh.getY() - 3, Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3 + (((Rectangle) sh).getLength()), sh.getY() - 3, Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3, sh.getY() - 3 + (((Rectangle) sh).getWidth()), Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3 + (((Rectangle) sh).getLength()), sh.getY() - 3 + (((Rectangle) sh).getWidth()), Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3 + (((Rectangle) sh).getLength() / 2), sh.getY() - 3, Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3, sh.getY() - 3 + (((Rectangle) sh).getWidth() / 2), Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes((sh.getX() - 3 + (((Rectangle) sh).getLength()) / 2), sh.getY() - 3 + (((Rectangle) sh).getWidth()), Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() + ((Rectangle) sh).getLength() - 3, (sh.getY() - 3 + ((Rectangle) sh).getWidth() / 2), Color.RED, 6, 6);
                    ca.selection.add(around);
                    repaint();
                } else if (sh instanceof Circle) {
                    around = new Resizeboxes(sh.getX() - 3, sh.getY() - 3, Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3 + (((Circle) sh).getRadius() * 2), sh.getY() - 3, Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3, sh.getY() - 3 + (((Circle) sh).getRadius() * 2), Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3 + (((Circle) sh).getRadius() * 2), sh.getY() - 3 + (((Circle) sh).getRadius() * 2), Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes((sh.getX() - 3 + (((Circle) sh).getRadius())), sh.getY() - 3, Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3, (sh.getY() - 3 + (((Circle) sh).getRadius())), Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes((sh.getX() - 3 + (((Circle) sh).getRadius())), (sh.getY() - 3 + (((Circle) sh).getRadius() * 2)), Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes((sh.getX() + (((Circle) sh).getRadius() * 2)) - 3, (sh.getY() - 3 + (((Circle) sh).getRadius())), Color.RED, 6, 6);
                    ca.selection.add(around);
                    repaint();
                } else if (sh instanceof Oval) {
                    around = new Resizeboxes(sh.getX() - 3, sh.getY() - 3, Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3 + (((Oval) sh).getH_radius() * 2), sh.getY() - 3, Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3, sh.getY() - 3 + (((Oval) sh).getV_radius() * 2), Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3 + (((Oval) sh).getH_radius() * 2), sh.getY() - 3 + (((Oval) sh).getV_radius() * 2), Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes((sh.getX() - 3 + (((Oval) sh).getH_radius())), sh.getY() - 3, Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3, (sh.getY() - 3 + (((Oval) sh).getV_radius())), Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes((sh.getX() - 3 + (((Oval) sh).getH_radius())), (sh.getY() - 3 + (((Oval) sh).getV_radius() * 2)), Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes((sh.getX() + (((Oval) sh).getH_radius() * 2)) - 3, (sh.getY() - 3 + (((Oval) sh).getV_radius())), Color.RED, 6, 6);
                    ca.selection.add(around);
                    repaint();
                }
                else if (sh instanceof Square)
                {
                    around = new Resizeboxes(sh.getX() - 3, sh.getY() - 3, Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3 + (((Square) sh).getSide()), sh.getY() - 3, Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3, sh.getY() - 3 + (((Square) sh).getSide()), Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3 + (((Square) sh).getSide()), sh.getY() - 3 + (((Square) sh).getSide()), Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3 + (((Square) sh).getSide() / 2), sh.getY() - 3, Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() - 3, sh.getY() - 3 + (((Square) sh).getSide() / 2), Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes((sh.getX() - 3 + (((Square) sh).getSide()) / 2), sh.getY() - 3 + (((Square) sh).getSide()), Color.RED, 6, 6);
                    ca.selection.add(around);

                    around = new Resizeboxes(sh.getX() + ((Square) sh).getSide() - 3, (sh.getY() - 3 + ((Square) sh).getSide() / 2), Color.RED, 6, 6);
                    ca.selection.add(around);
                    repaint();
                
            }
            else 
            {
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            ca.select = 0;
            resize = 0;
            ca.dcircle = 0;
            ca.doval = 0;
            ca.drec = 0;
            ca.dsq = 0;
            move = 0;
            //jTextField1.setText(Integer.toString(ca.selected.size()) + Integer.toString(ca.shapes.size()));
            ca.selection.clear();
            sh = ca.selected.get(0);
            ca.shapes.add(sh);
            //ca.s1.add(sh);
            ca.selected.clear();
            //jTextField1.setText(Integer.toString(ca.selected.size()) + Integer.toString(ca.shapes.size()) + move);
            repaint();
            }
        }
        }
    }//GEN-LAST:event_jPanel7MouseClicked

    private void jPanel7MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel7MouseMoved
        if (mode == 15 && draw == 3) {
            int m = ca.shapes.size();
            Xnew = evt.getPoint().getX();
            Ynew = evt.getPoint().getY();
            boolean st = false;
            while (m > 0) {
                //st=false;
                sh = ca.shapes.get(m - 1);
                st = sh.ContPt(sh, (int) Xnew, (int) Ynew);
                if (st == true) {
                    break;
                }
                m--;
            }
            if (st == true) {
                this.setCursor(new Cursor(Cursor.HAND_CURSOR));
                }
                else if(st == false)
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        if (move == 1 && ca.dcircle == 0 && ca.dsq == 0 && ca.doval == 0 && ca.drec == 0 && ca.select == 1 && resize == 0 && draw == 1) {
            Xnew = evt.getPoint().getX();
            Ynew = evt.getPoint().getY();
            //System.out.println(Xnew+","+Ynew);
            int m = ca.selected.size();
            boolean st = false;
            while (m > 0) {
                //st=false;
                sh = ca.selected.get(m-1);
                st = sh.ContPt(sh, (int) Xnew, (int) Ynew);
                if (st == true) {
                    break;
                }
                m--;
            }
            if (st == true) {
                this.setCursor(new Cursor(Cursor.MOVE_CURSOR));
            } else {
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        //sh.x = (int)evt.getPoint().getX();
            //sh.y = (int)evt.getPoint().getX();
            //repaint();
        }
        if (ca.select == 1 && resize == 1 && ca.dcircle == 0 && ca.dsq == 0 && ca.doval == 0 && ca.drec == 0) {
            // jTextField1.setText(Integer.toString(ca.selection.size()));
            Xnew = evt.getPoint().getX();
            Ynew = evt.getPoint().getY();
            int m = ca.selection.size() - 1;
            boolean st = false;
            while (m >= 0) {
                st = false;
                around = ca.selection.get(m);
                st = around.contains(around, (int) Xnew, (int) Ynew);
                if (st == true) {
                    break;
                }
                m--;
            }

            if (st == true) {

                if (m == 0) {
                    mode_resize = 1;
                //    jTextField1.setText(Integer.toString(mode_resize));
                    this.setCursor(new Cursor(Cursor.NW_RESIZE_CURSOR));
                } else if (m == 1) {

                    mode_resize = 2;
                  //  jTextField1.setText(Integer.toString(mode_resize));
                    this.setCursor(new Cursor(Cursor.NE_RESIZE_CURSOR));
                } else if (m == 2) {
                    mode_resize = 3;
                   // jTextField1.setText(Integer.toString(mode_resize));
                    this.setCursor(new Cursor(Cursor.SW_RESIZE_CURSOR));
                } else if (m == 3) {
                    mode_resize = 4;
                   // jTextField1.setText(Integer.toString(mode_resize));
                    this.setCursor(new Cursor(Cursor.SE_RESIZE_CURSOR));
                } else if (m == 4) {
                    mode_resize = 5;
                   // jTextField1.setText(Integer.toString(mode_resize));
                    this.setCursor(new Cursor(Cursor.N_RESIZE_CURSOR));
                } else if (m == 5) {
                    mode_resize = 6;
                   // jTextField1.setText(Integer.toString(mode_resize));
                    this.setCursor(new Cursor(Cursor.E_RESIZE_CURSOR));
                } else if (m == 6) {
                    mode_resize = 7;
                  //  jTextField1.setText(Integer.toString(mode_resize));
                    this.setCursor(new Cursor(Cursor.N_RESIZE_CURSOR));
                } else if (m == 7) {
                    mode_resize = 8;
                  //  jTextField1.setText(Integer.toString(mode_resize));
                    this.setCursor(new Cursor(Cursor.E_RESIZE_CURSOR));
                }

            } else {
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

            }
        }
    }//GEN-LAST:event_jPanel7MouseMoved

    private void jPanel7MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel7MouseDragged
        if (mode == 3 && draw == 2)//||( mode == 1 && cb_eraser.getSelectedItem().toString().equals("Brush"))) {
        {
            jPanel7MouseClicked(evt);
        } else if (mode == 1 && draw == 2) {
            xd = evt.getX();
            yd = evt.getY();
            line2d = new Line2D.Float((float) xp, (float) yp, (float) xd, (float) yd);
            line.set(line2d, xp, yp, xp, yp);
            line = new Line((int) xp, (int) yp, ca.getBackground(), (int) xd, (int) yd, stroke);
            ca.lines.add(line);
            ca.s1.push(line);
            repaint();
            xp = xd;
            yp = yd;
            Xnew = evt.getX();
            Ynew = evt.getY();
            line2d.setLine((float) Xold, (float) Yold, (float) Xnew, (float) Ynew);

        } else if (mode == 2 && draw == 2) {
            xd = evt.getX();
            yd = evt.getY();
            //line.setLine((float) xp,(float) yp,(float) xd,(float) yd);
            //line = new Line2D.Float((float) xp,(float) yp,(float) xd,(float) yd);
            line2d = new Line2D.Float((float) xp, (float) yp, (float) xd, (float) yd);
            line.set(line2d, xp, yp, xp, yp);
            line = new Line((int) xp, (int) yp, color, (int) xd, (int) yd, stroke);
            ca.lines.add(line);
            ca.s1.push(line);
            repaint();
            xp = xd;
            yp = yd;
        } else if (mode == 4 && draw == 2) {
            Xnew = evt.getX();
            Yold = evt.getY();
            //line = new Line2D.Float((float) Xold,(float) Yold,(float) Xnew,(float) Ynew);
            line = new Line((int) Xold, (int) Yold, color, (int) Xnew, (int) Ynew, stroke);
            ca.lines.add(line);
            ca.s1.push(line);
            repaint();
        } else if (mode == 5 && draw == 2) {
            Xnew = evt.getX();
            Ynew = evt.getY();
            line2d.setLine((float) Xold, (float) Yold, (float) Xnew, (float) Ynew);
            //line2d = new Line2D.Float((float) Xold,(float) Yold,(float) Xnew,(float) Ynew);
            //line2d = line.set(line2d,(int) Xold,(int) Yold,(int) Xnew,(int) Ynew);
            //line = new Line( (int)line2d.getX1(), (int)line2d.getY1(),color,(int)line2d.getX2(), (int)line2d.getY2(),stroke);
            repaint();
        } else if (draw == 2 && mode == 0) {
            sh.setX((int) evt.getPoint().getX());
            sh.setY((int) evt.getPoint().getY());
            repaint();
        }
        if (ca.dcircle == 0 && ca.drec == 0 && ca.dsq == 0 && ca.doval == 0 && ca.select == 1 && move == 1 && draw == 1) {
            sh.setX((int) evt.getPoint().getX());
            sh.setY((int) evt.getPoint().getY());
            repaint();
            Xold = (int) evt.getPoint().getX();
            Yold = (int) evt.getPoint().getY();
        } else if (ca.dcircle == 1 && draw == 1) {

            ((Circle) sh).setRadius(((int) evt.getPoint().getX() - (int) Xold) / 2);
            ((Circle) sh).setRadius(((int) evt.getPoint().getY() - (int) Yold) / 2);
            repaint();
        } else if (ca.doval == 1 && draw == 1) {
            ((Oval) sh).setH_radius(((int) evt.getPoint().getX() - (int) Xold) / 2);
            ((Oval) sh).setV_radius(((int) evt.getPoint().getY() - (int) Yold) / 2);
            repaint();
        } else if (ca.drec == 1 && draw == 1) {
          //if((int)evt.getPoint().getX() > (int)Xold)
            //  {
            ((Rectangle) sh).setLength((int) evt.getPoint().getX() - (int) Xold);
            ((Rectangle) sh).setWidth((int) evt.getPoint().getY() - (int) Yold);
            repaint();
          //}
            // else if ((int)evt.getPoint().getX() < (int)Xold)
            //   {
            //   ((Rectangle)sh).length = ((int)Xold - (int)evt.getPoint().getX());
            //   ((Rectangle)sh).width = ((int)Yold - (int)evt.getPoint().getY());
            //repaint();
            //}
            //  repaint();
        } else if (ca.dsq == 1 && draw == 1) {
         // if((int)evt.getPoint().getX() > (int)Xold)
            //   {
            ((Square) sh).setSide((int) evt.getPoint().getX() - (int) Xold);
            repaint();
          //}
            //  else if ((int)evt.getPoint().getX() < (int)Xold)
            //    {
            //   ((Square)sh).side = ((int)Xold - (int)evt.getPoint().getX() );
            //   repaint();
            //   }
            //     repaint();
        } else if (resize == 1 && draw == 1) {
            if (ca.selected.size() > 1) {
                sh = ca.selected.get(ca.selected.size());
                for (int i = 0; i < ca.selected.size() - 2; i++) {
                    ca.selected.remove(i);
                }
            } else if (ca.selected.size() == 1) {
                sh = ca.selected.get(0);
            }
            if (mode_resize == 1) {

                if (sh instanceof Rectangle) {
                    //sh.x = (int)((Xold - evt.getPoint().getX())-((Rectangle)sh).length/2);
                    ((Rectangle) sh).setX((int) ((evt.getPoint().getY()) - (int) (0.5 * ((Rectangle) sh).getLength())));
                    ((Rectangle) sh).setWidth((int) (((Rectangle) sh).getWidth() + (Yold + (int) evt.getPoint().getY())));
                    repaint();
                }

                if (sh instanceof Circle) {
                    //sh.x = (int)((Xold - evt.getPoint().getX())-((Rectangle)sh).length/2);
                    ((Circle) sh).setY((int) ((evt.getPoint().getY()) - (int) (0.5 * ((Rectangle) sh).getLength())));
                    ((Circle) sh).setRadius((int) (((Circle) sh).getRadius() + (Yold + (int) evt.getPoint().getY())) * 2);
                    repaint();
                }

            }
            if (mode_resize == 7) {

                if (sh instanceof Rectangle) {
                    ((Rectangle) sh).setWidth((int) (evt.getPoint().getY() - sh.getY()));
                    ca.selection.clear();
                    repaint();
                }

                if (sh instanceof Square) {
                    ((Square) sh).setSide((int) (evt.getPoint().getY() - sh.getY()));
                    ca.selection.clear();
                    repaint();
                }

                if (sh instanceof Circle) {
                    ((Circle) sh).setRadius((int) (evt.getPoint().getY() - sh.getY()) / 2);
                    ca.selection.clear();
                    repaint();
                }

                if (sh instanceof Oval) {
                    ((Oval) sh).setV_radius((int) (evt.getPoint().getY() - sh.getY()) / 2);
                    ca.selection.clear();
                    repaint();
                }

            }

            if (mode_resize == 4) {

                if (sh instanceof Rectangle) {
                    ((Rectangle) sh).setWidth((int) (evt.getPoint().getY() - sh.getY()));
                    ((Rectangle) sh).setLength((int) (evt.getPoint().getX() - sh.getX()));
                    ca.selection.clear();
                    repaint();
                }

                if (sh instanceof Square) {
                    ((Square) sh).setSide((int) (evt.getPoint().getY() - sh.getY()));
                    ca.selection.clear();
                    repaint();
                }

                if (sh instanceof Circle) {
                    ((Circle) sh).setRadius((int) (evt.getPoint().getY() - sh.getY()) / 2);
                    ca.selection.clear();
                    repaint();
                }

                if (sh instanceof Oval) {
                    ((Oval) sh).setH_radius((int) (evt.getPoint().getX() - sh.getX()) / 2);
                    ca.selection.clear();
                    repaint();
                }

            }
            if (mode_resize == 8) {

                if (sh instanceof Rectangle) {
                    ((Rectangle) sh).setLength((int) (evt.getPoint().getX() - sh.getX()));
                    ca.selection.clear();
                    repaint();
                }

                if (sh instanceof Square) {
                    ((Square) sh).setSide((int) (evt.getPoint().getX() - sh.getX()));
                    ca.selection.clear();
                    repaint();
                }

                if (sh instanceof Circle) {
                    ((Circle) sh).setRadius((int) (evt.getPoint().getX() - sh.getX()) / 2);
                    ca.selection.clear();
                    repaint();
                }

                if (sh instanceof Oval) {
                    ((Oval) sh).setH_radius((int) (evt.getPoint().getX() - sh.getX()) / 2);
                    ca.selection.clear();
                    repaint();
                }

            }
        }

    }//GEN-LAST:event_jPanel7MouseDragged

    private void jPanel7MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel7MousePressed
        if (mode == 9 && i_tri < 3 && draw == 2) {
            System.out.println("aaaa");
            
            mX = (int) evt.getPoint().getX();
            mY = (int) evt.getPoint().getY();
            x_tri[i_tri] = mX;
            y_tri[i_tri] = mY;
            i_tri++;
            if (i_tri == 3) {
                x_tri[3] = x_tri[0];
                y_tri[3] = y_tri[0];
                stroke = new BasicStroke((float) slider.getValue());
                triangle = new Triangle(x_tri, y_tri, color, stroke);
                ca.tri.add(triangle);
                ca.s1.push(triangle);
                repaint();
                i_tri = 0;
                x_tri = new int[4];
                y_tri = new int[4];
                btn_tri.setSelected(false);
            }
        }
            else if (mode == 10 && i_pent < 5 && draw == 2) {
            mX = (int) evt.getPoint().getX();
            mY = (int) evt.getPoint().getY();
            x_pent[i_pent] = mX;
            y_pent[i_pent] = mY;
            i_pent++;
            if (i_pent == 5) {
                x_pent[5] = x_pent[0];
                y_pent[5] = y_pent[0];
                stroke = new BasicStroke((float) slider.getValue());
                pentagon = new Pentagon(x_pent, y_pent, color, stroke);
                ca.pent.add(pentagon);
                ca.s1.push(pentagon);
                repaint();
                i_pent =0;
                x_pent = new int[6];
                y_pent = new int[6];
                btn_pentagon.setSelected(false);
            }
        } else if ((mode == 4 || mode == 5) && draw == 2) {
            repaint();
            ca.color(color);
            stroke = new BasicStroke((float) slider.getValue());
            ca.stroke(stroke);
            Xold = evt.getX();
            Yold = evt.getY();
            Xnew = evt.getX();
            Ynew = evt.getY();
            line2d = new Line2D.Float((float) Xold, (float) Yold, (float) Xnew, (float) Ynew);
            line = new Line((int) Xold, (int) Yold, color, (int) Xnew, (int) Ynew, stroke);
            //ca.lines.add(line);
            ca.lines2d.add(line2d);
            ca.s1.push(line2d);
            repaint();
        } else if (mode == 1 && draw == 2) {
            
            stroke = new BasicStroke((float) slider.getValue());
            ca.stroke(stroke);
            ca.setOpaque(true);
            xp = evt.getX();
            yp = evt.getY();
            xd = evt.getX();
            yd = evt.getY();
            line = new Line((int) xp, (int) yp, ca.getBackground(), (int) xd, (int) yd, stroke);
            ca.lines.add(line);
            ca.s1.push(line);
            repaint();
        } else if (mode == 2 && draw == 2) {
            //repaint();
            ca.color(color);
            stroke = new BasicStroke((float) slider.getValue());
            System.out.println(stroke);
            ca.stroke(stroke);
            ca.setOpaque(true);
            xp = evt.getX();
            yp = evt.getY();
            xd = evt.getX();
            yd = evt.getY();
            //line = new Line2D.Float((float) xp,(float) yp,(float) xd,(float) yd);
            line = new Line((int) xp, (int) yp, color, (int) xd, (int) yd, stroke);
            ca.lines.add(line);
            ca.s1.push(line);
            repaint();

        }
        if (ca.dcircle == 0 && ca.drec == 0 && ca.dsq == 0 && ca.doval == 0 && resize == 0 && move == 1 && ca.select == 1 && draw == 1) {
           // jTextField1.setText("MMMM");
            Xnew = evt.getPoint().getX();
            Ynew = evt.getPoint().getY();
            System.out.println(Xnew + "," + Ynew);
            int m = ca.selected.size();
            boolean st = false;
            while (m > 0) {
                //st=false;
                sh = ca.selected.get(m - 1);
                st = sh.ContPt(sh, (int) Xnew, (int) Ynew);
                if (st == true) {
                    break;
                }
                m--;
            }
            if (st == true) {
                this.setCursor(new Cursor(Cursor.HAND_CURSOR));
                selected = sh;
            } else {
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        } //jTextField1.setText("pressed");
        else if (ca.dcircle == 0 && ca.drec == 0 && ca.dsq == 0 && ca.doval == 0 && resize == 0 && ca.select == 1 && draw == 1) {
            //jTextField1.setText("farida");
            Xnew = evt.getPoint().getX();
            Ynew = evt.getPoint().getY();
            System.out.println(Xnew + "," + Ynew);
            int m = ca.shapes.size();
            boolean st = false;
            while (m > 0) {
                st = false;
                sh = ca.shapes.get(m - 1);
                st = sh.ContPt(sh, (int) Xnew, (int) Ynew);
                if (st == true) {
                    break;
                }
                m--;
            }
            if (st == true) {
                this.setCursor(new Cursor(Cursor.HAND_CURSOR));

            } else {
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        } else if (ca.dcircle == 1 && draw == 1) {
           // jTextField1.setText("ahmed");

            Xold = (int) evt.getPoint().getX();
            Yold = (int) evt.getPoint().getY();
            
            
            stroke = new BasicStroke((float) slider.getValue());
            sh = new Circle((int) Xold, (int) Yold, color, 0, stroke);
            ca.shapes.add(sh);
         //Graphics g = null;
            //ca.paintComponent(g);
            repaint();
        } else if (ca.drec == 1 && draw == 1) {
           // jTextField1.setText("ahmed");

            Xold = (int) evt.getPoint().getX();
            Yold = (int) evt.getPoint().getY();
            stroke = new BasicStroke((float) slider.getValue());
            sh = new Rectangle((int) Xold, (int) Yold, color, 0, 0, stroke);
            ca.shapes.add(sh);
         //Graphics g = null;
            //ca.paintComponent(g);
            repaint();
        } else if (ca.dsq == 1 && draw == 1) {
           // jTextField1.setText("ahmed");

            Xold = (int) evt.getPoint().getX();
            Yold = (int) evt.getPoint().getY();
            stroke = new BasicStroke((float) slider.getValue());
            sh = new Square((int) Xold, (int) Yold, color, 0, stroke);
           // jTextField1.setText(Integer.toString(ca.shapes.size()));
            ca.shapes.add(sh);

         //Graphics g = null;
            //ca.paintComponent(g);
            repaint();
        } else if (ca.doval == 1 && draw == 1) {
           // jTextField1.setText("ahmed");

            Xold = (int) evt.getPoint().getX();
            Yold = (int) evt.getPoint().getY();
            stroke = new BasicStroke((float) slider.getValue());
            sh = new Oval((int) Xold, (int) Yold, color, 0, 0, stroke);
            ca.shapes.add(sh);
         //Graphics g = null;
            // ca.paintComponent(g);
            repaint();
        } else if (resize == 1 && draw == 1) {
            if (mode_resize == 1) {

                 //Xold = (int)evt.getPoint().getX()-(int)(0.5*(((Rectangle)sh).length));
                //Yold = (int)evt.getPoint().getY();
                Xold = ((Rectangle) sh).getX();
                Yold = ((Rectangle) sh).getY();
                // jTextField1.setText(Integer.toString(ca.shapes.size()));
            }

        }
    }//GEN-LAST:event_jPanel7MousePressed

    private void jPanel7MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel7MouseReleased
        if (ca.select == 0 && draw == 1) {
            if (ca.doval == 1) {
                ((Oval) sh).setH_radius(((int) evt.getPoint().getX() - (int) Xold) / 2);
                ((Oval) sh).setV_radius(((int) evt.getPoint().getY() - (int) Yold) / 2);
                ca.s1.push(sh);
                
                ca.s1.push(1);
                repaint();
            }
            ca.doval = 0;
            if (ca.drec == 1) {
                ((Rectangle) sh).setLength((int) evt.getPoint().getX() - (int) Xold);
                ((Rectangle) sh).setWidth((int) evt.getPoint().getY() - (int) Yold);
                ca.s1.push(sh);
                
                ca.s1.push(1);
                repaint();
            }
            ca.drec = 0;
            if (ca.dsq == 1) {
                ((Square) sh).setSide((int) evt.getPoint().getX() - (int) Xold);
                ca.s1.push(sh);
                
                ca.s1.push(1);
                repaint();
             //   jTextField1.setText(Integer.toString(ca.shapes.size()));
            }
            ca.dsq = 0;
            if (ca.dcircle == 1) {
                ((Circle) sh).setRadius(((int) evt.getPoint().getX() - (int) Xold) / 2);
                ((Circle) sh).setRadius(((int) evt.getPoint().getY() - (int) Yold) / 2);
                ca.s1.push(sh);
                
                ca.s1.push(1);
                repaint();
            }
            ca.dcircle = 0;
        } else if ((resize == 1 || move == 1) && draw == 1) {
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            ca.select = 0;
            resize = 0;
            ca.dcircle = 0;
            ca.doval = 0;
            ca.drec = 0;
            ca.dsq = 0;
            move = 0;
            //jTextField1.setText(Integer.toString(ca.selected.size()) + Integer.toString(ca.shapes.size()));
            ca.selection.clear();
            sh = ca.selected.get(0);
            ca.shapes.add(sh);
            //ca.s1.add(sh);
            ca.selected.clear();
            //jTextField1.setText(Integer.toString(ca.selected.size()) + Integer.toString(ca.shapes.size()) + move);
            repaint();
        }
       // if (mode == 4 && draw == 2) {
         //   Xnew = evt.getX();
         //   Ynew = evt.getY();
            //line = new Line2D.Float((float) Xold,(float) Yold,(float) Xnew,(float) Ynew);
          //  line = new Line((int) Xold, (int) Yold, color, (int) Xnew, (int) Ynew, stroke);
         //   ca.lines.add(line);
         //   ca.s1.push(line);
          //  repaint();
     //} 
else if (mode == 5 && draw == 2) {
            Xnew = evt.getX();
            Ynew = evt.getY();
            //line2d = new Line2D.Float((float) Xold,(float) Yold,(float) Xnew,(float) Ynew);
            //line2d = line.set(line2d,(int) Xold,(int) Yold,(int) Xnew,(int) Ynew);
            //line = new Line( (int)line2d.getX1(), (int)line2d.getY1(),color,(int)line2d.getX2(), (int)line2d.getY2(),stroke);
            line2d.setLine((float) Xold, (float) Yold, (float) Xnew, (float) Ynew);
            repaint();
            line = new Line((int) line2d.getX1(), (int) line2d.getY1(), color, (int) line2d.getX2(), (int) line2d.getY2(), stroke);
            ca.lines.add(line);
            ca.s1.push(line);
            ca.lines2d.clear();
            repaint();
        }
    }//GEN-LAST:event_jPanel7MouseReleased

    private void btn_3dActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_3dActionPerformed
        if (btn_3d.isSelected()) {
            mode = 4;
            draw = 2;
            btn_brush.setSelected(false);
            btn_line.setSelected(false);
            btn_ink.setSelected(false);
            btn_pen.setSelected(false);
            btn_fill.setSelected(false);
            btn_text.setSelected(false);
            btn_eraser.setSelected(false);
            btn_pentagon.setSelected(false);
            btn_tri.setSelected(false);
            ca.color(color);
        } else {
            mode = 0;
            draw = 0;
        }
    }//GEN-LAST:event_btn_3dActionPerformed

    private void btn_eraserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eraserActionPerformed
        if (btn_eraser.isSelected()) {
            mode = 1;
            draw = 2;
            btn_3d.setSelected(false);
            btn_line.setSelected(false);
            btn_ink.setSelected(false);
            btn_pen.setSelected(false);
            btn_fill.setSelected(false);
            btn_text.setSelected(false);
            btn_pentagon.setSelected(false);
            btn_tri.setSelected(false);
            btn_brush.setSelected(false);
        } else {
            mode = 0;
            draw = 0;

        }
    }//GEN-LAST:event_btn_eraserActionPerformed

    private void btn_lineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_lineActionPerformed
        if (btn_line.isSelected()) {
            mode = 5;
            draw = 2;
            btn_3d.setSelected(false);
            btn_brush.setSelected(false);
            btn_ink.setSelected(false);
            btn_pen.setSelected(false);
            btn_fill.setSelected(false);
            btn_text.setSelected(false);
            btn_eraser.setSelected(false);
            btn_tri.setSelected(false);
            btn_pentagon.setSelected(false);
            ca.color(color);
        } else {
            mode = 0;
            draw = 0;
        }
    }//GEN-LAST:event_btn_lineActionPerformed

    private void btn_colorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_colorActionPerformed
        JColorChooser CP = new JColorChooser();
        CP.setVisible(true);
        color = JColorChooser.showDialog(null, null, color);

        if (selected != null) {
            selected.setColor(color);
            repaint();
        }

    }//GEN-LAST:event_btn_colorActionPerformed

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        ca.shapes.clear();
        ca.tools.clear();
        ca.lines.clear();
        ca.tri.clear();
        ca.pent.clear();
        ca.selection.clear();
        ca.filled.clear();
        repaint();
    }//GEN-LAST:event_btn_clearActionPerformed

    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
        lbl_value.setText("" + slider.getValue());
    }//GEN-LAST:event_sliderStateChanged

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed

        
        JFileChooser fs = new JFileChooser(new File("C:\\"));
        fs.setDialogTitle("Save Canvas");
        
       fs.showSaveDialog(this);
       if(fs.getSelectedFile()!=null)
       {
           try{
               String paths=fs.getSelectedFile().getPath();
               SaveLoad sv=new SaveLoad();
               sv
                       .save(paths, ca.shapes);
           }catch(ParserConfigurationException | IOException e4)
           {
               Logger.getLogger(paintframe.class.getName()).log(Level.SEVERE, null, ex);
           }
       }
    }//GEN-LAST:event_btn_saveActionPerformed

    private void btn_loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_loadActionPerformed

        JFileChooser fs = new JFileChooser();
        fs.showOpenDialog(this);

        if (fs.getSelectedFile() != null) {
            String path = fs.getSelectedFile().getPath();
            try {
                SaveLoad sl = new SaveLoad();
                ca.shapes = sl.load(path);
                ca.repaint();
            } catch (ParserConfigurationException | IOException | SAXException e4) {
                Logger.getLogger(paintframe.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        

    }//GEN-LAST:event_btn_loadActionPerformed

    private void btn_pentagonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pentagonActionPerformed
        if (btn_pentagon.isSelected()) {
            btn_3d.setSelected(false);
        btn_line.setSelected(false);
        btn_ink.setSelected(false);
        btn_pen.setSelected(false);
        btn_brush.setSelected(false);
        btn_fill.setSelected(false);
        btn_eraser.setSelected(false);
        btn_tri.setSelected(false);
        btn_text.setSelected(false);
            mode = 10;
            draw = 2;
        } else {
            mode = 0;
            draw = 0;
        }
    }//GEN-LAST:event_btn_pentagonActionPerformed

    private void btn_selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_selectActionPerformed
        btn_delete.setEnabled(true);
        btn_move.setEnabled(true);
        btn_resize.setEnabled(true);
        ca.select = 1;
        draw = 1;
        //jPanel11.setVisible(true);
       // jTextField1.setText(Integer.toString(ca.selected.size()) + Integer.toString(ca.shapes.size()));
    }//GEN-LAST:event_btn_selectActionPerformed

    private void btn_resizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_resizeActionPerformed
        resize = 1;
        draw = 1;
        if(ca.selected.size() > 1)
        {
            resize = 0;
            ca.selection.clear();
            int m = ca.selected.size();
            while(m != 0)
            {
                sh = ca.selected.get(m-1);
                ca.shapes.add(sh);
                ca.selected.remove(m-1);
                m--;
            }
            repaint();
            JOptionPane.showMessageDialog(null, "Select only one Shape to be resized !!");
            ca.select = 0;
        }
        else if (ca.selected.size() == 1)
            resize = 1;
        
        //jTextField1.setText(Integer.toString(ca.selected.size()) + Integer.toString(ca.shapes.size()));
        draw =1;
    }//GEN-LAST:event_btn_resizeActionPerformed

    private void btn_moveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_moveActionPerformed
        move = 1;
        ca.select = 1;
        draw = 1;
        if(ca.selected.size() > 1)
        {
            move = 0;
            ca.select = 0;
            ca.selection.clear();
            int m = ca.selected.size();
            while(m != 0)
            {
                sh = ca.selected.get(m-1);
                ca.shapes.add(sh);
                ca.selected.remove(m-1);
                m--;
            }
            repaint();
            JOptionPane.showMessageDialog(null, "Select only one Shape to be moved !!");
            ca.select = 0;
        }
        else if (ca.selected.size() == 1)
            move = 1;
        
        //jTextField1.setText(Integer.toString(ca.selected.size()) + Integer.toString(ca.shapes.size()));
        draw =1;
    }//GEN-LAST:event_btn_moveActionPerformed

    private void btn_triActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_triActionPerformed
        if (btn_tri.isSelected()) {
        btn_3d.setSelected(false);
        btn_line.setSelected(false);
        btn_ink.setSelected(false);
        btn_pen.setSelected(false);
        btn_brush.setSelected(false);
        btn_fill.setSelected(false);
        btn_eraser.setSelected(false);
        btn_pentagon.setSelected(false);
        btn_text.setSelected(false);
        mode = 9;
        draw = 2;
        } else {
            mode = 0;
            draw = 0;
        }
    }//GEN-LAST:event_btn_triActionPerformed

    private void btnovalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnovalActionPerformed
        btn_3d.setSelected(false);
        btn_line.setSelected(false);
        btn_ink.setSelected(false);
        btn_pen.setSelected(false);
        btn_brush.setSelected(false);
        btn_fill.setSelected(false);
        btn_eraser.setSelected(false);
        btn_pentagon.setSelected(false);
        btn_tri.setSelected(false);
        btn_text.setSelected(false);
        ca.doval = 1;
        ca.dcircle = 0;
        ca.drec = 0;
        ca.dsq = 0;
        resize = 0;
        ca.select = 0;
        move = 0;
        draw = 1;
        ca.selection.clear();
        repaint();
    }//GEN-LAST:event_btnovalActionPerformed

    private void btnrectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrectActionPerformed
        btn_3d.setSelected(false);
        btn_line.setSelected(false);
        btn_ink.setSelected(false);
        btn_pen.setSelected(false);
        btn_brush.setSelected(false);
        btn_fill.setSelected(false);
        btn_eraser.setSelected(false);
        btn_pentagon.setSelected(false);
        btn_tri.setSelected(false);
        btn_text.setSelected(false);
        ca.selection.clear();
        ca.drec = 1;
        ca.dcircle = 0;
        ca.doval = 0;
        ca.dsq = 0;
        resize = 0;
        ca.select = 0;
        move = 0;
        draw = 1;
        repaint();
       // jTextField1.setText("aaaa");
    }//GEN-LAST:event_btnrectActionPerformed

    private void btnsquareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsquareActionPerformed
        btn_3d.setSelected(false);
        btn_line.setSelected(false);
        btn_ink.setSelected(false);
        btn_pen.setSelected(false);
        btn_brush.setSelected(false);
        btn_fill.setSelected(false);
        btn_eraser.setSelected(false);
        btn_pentagon.setSelected(false);
        btn_tri.setSelected(false);
        btn_text.setSelected(false);
        ca.dsq = 1;
        ca.dcircle = 0;
        ca.drec = 0;
        resize = 0;
        ca.select = 0;
        move = 0;
        ca.doval = 0;
        draw = 1;
        ca.selection.clear();
        repaint();
       // jTextField1.setText("aaaa");
    }//GEN-LAST:event_btnsquareActionPerformed

    private void btncircleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncircleActionPerformed
btn_3d.setSelected(false);
        btn_line.setSelected(false);
        btn_ink.setSelected(false);
        btn_pen.setSelected(false);
        btn_brush.setSelected(false);
        btn_fill.setSelected(false);
        btn_eraser.setSelected(false);
        btn_pentagon.setSelected(false);
        btn_tri.setSelected(false);
        btn_text.setSelected(false);
        ca.dcircle = 1;
        ca.drec = 0;
        ca.dsq = 0;
        resize = 0;
        ca.select = 0;
        move = 0;
        ca.doval = 0;
        draw = 1;
        ca.selection.clear();
        repaint();
        //jTextField1.setText("aaaa");
    }//GEN-LAST:event_btncircleActionPerformed

    private void btn_fillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_fillActionPerformed
        if (btn_fill.isSelected()) {
            draw = 3;
            mode = 15;
            btn_3d.setSelected(false);
            btn_line.setSelected(false);
            btn_ink.setSelected(false);
            btn_pen.setSelected(false);
            btn_brush.setSelected(false);
            btn_text.setSelected(false);
            btn_eraser.setSelected(false);
            btn_pentagon.setSelected(false);
            btn_tri.setSelected(false);
            JColorChooser CP = new JColorChooser();
            CP.setVisible(true);
            color = JColorChooser.showDialog(null, null, color);

            if (selected != null) {
            selected.setColor(color);
            repaint();
            }
        } else {
            mode = 0;
            draw = 0;
        }    }//GEN-LAST:event_btn_fillActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void btn_doneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_doneActionPerformed
        TextPanel.setVisible(false);
        btn_text.setSelected(false);
        flag = true;
        draw = 4;
        painttext(g);
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_doneActionPerformed

    private void btn_redoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_redoActionPerformed

        Object e = ca.s2.pop();
        //System.out.println(e);
        //System.out.println(e.getClass().getSimpleName());
        //int index;
        if (e.getClass().getSimpleName().equalsIgnoreCase("Integer"))
        {
            System.out.println("int");
            redoflag = (int)(e);
            e = ca.s2.pop();
        }
        
        if (e.getClass().getSimpleName().equalsIgnoreCase("text")) {
            //if (redoflag == 100) {
                //  ca.s1.push(extra);
                //Object extra2 = ca.s2.pop();
                //ca.text.add(redoindex, (Text) extra2);
                //ca.s1.push(extra2);

                //} else
            {
                ca.text.add((Text) e);
                ca.s1.push(e);
            }
        }  else if (e.getClass().getSuperclass().getSimpleName().equalsIgnoreCase("Shape") || e.getClass().getSuperclass().getSimpleName().equalsIgnoreCase("Rectangle") || e.getClass().getSuperclass().getSimpleName().equalsIgnoreCase("Oval")) {
            if (redoflag == 1) {
                ca.shapes.add((Shape) e);
                ca.s1.push(e);
                ca.s1.push(1);

            } else if (redoflag == 2) {
                ca.tools.add((Shape) e);
                ca.s1.push(e);
                ca.s1.push(1);

            }
            else if (nflag == 1)
                        {
                        ca.shapes.remove((Shape)e);
                        nflag = 0;
                        
                        }
            
            else if (redoflag == 100) {
                ca.s1.push(extra);
                Object extra2 = ca.s2.pop();
                ca.shapes.add(redoindex, (Shape) extra2);
                ca.s1.push(extra2);
            }
                
            else if (e.getClass().getSimpleName().equalsIgnoreCase("Line")) {
            System.out.println("Line Detected");
            ca.lines.add((Line) e);
            ca.s1.push(e);
            //repaint();
        }

            
        }
        else if (e.getClass().getSimpleName().equalsIgnoreCase("Line2D")) {
            ca.lines2d.add((Line2D) e);
            ca.s1.push(e);
        }
         else if (e.getClass().getSimpleName().equalsIgnoreCase("Pentagon"))
        {
             ca.pent.add((Pentagon) e);
            ca.s1.push(e);
        }
         else if (e.getClass().getSimpleName().equalsIgnoreCase("Triangle"))
        {
             ca.tri.add((Triangle) e);
            ca.s1.push(e);
        }
        // TODO add your handling code here:
        repaint();
    }//GEN-LAST:event_btn_redoActionPerformed

    private void btn_undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_undoActionPerformed
        Object e = ca.s1.pop();
        System.out.println(e);
        System.out.println(e.getClass().getSimpleName());
        int index;
        if (e.getClass().getSimpleName().equalsIgnoreCase("Integer"))
        {
            System.out.println("int");
            undoflag = (int)(e);
            e = ca.s1.pop();
        }
        
        System.out.println("Type: " + e.getClass().getSuperclass().getSimpleName());

        if (e.getClass().getSuperclass().getSimpleName().equalsIgnoreCase("Shape") || e.getClass().getSuperclass().getSimpleName().equalsIgnoreCase("Rectangle") || e.getClass().getSuperclass().getSimpleName().equalsIgnoreCase("Oval")) {

            if (undoflag == 1) {
                ca.shapes.remove((Shape) e);
                ca.s2.push(e);
                undoflag=0;
                //redoflag = 1;
                ca.s2.push(1);
                System.out.println("e1");
            }
                else if (mflag == 1)
                        {
                        ca.shapes.add((Shape)e);
                        ca.s2.push(e);
                        nflag = 1;
                        mflag=0;
                        }
             else if (undoflag == 2) {
                ca.tools.remove((Shape) e);
                ca.s2.push(e);
                undoflag=0;
                //redoflag = 2;
                ca.s2.push(2);
                System.out.println("e2");
            } //else if (undoflag == 100) {
                //index = ca.shapes.indexOf(e);
                //ca.s2.push(e);
                //extra = ca.s1.pop();
                //ca.shapes.add(index, (Shape) extra);
                //redoflag = 100;
                //redoindex = index;
                //}
             
            //repaint();
        
        else if (e.getClass().getSimpleName().equalsIgnoreCase("Line")) {
            System.out.println("Line Detected");
            ca.lines.remove((Line) e);
            ca.s2.push(e);
            System.out.println("e3");
        }
            else if (e.getClass().getSimpleName().equalsIgnoreCase("Line2D")) {
            System.out.println("Line Detected");
            ca.lines.remove((Line2D) e);
            ca.s2.push(e);
            System.out.println("e4");
        }
            System.out.println("Shape Detected");
            //repaint();
        
        }
        
        else if (e.getClass().getSimpleName().equalsIgnoreCase("text")) {
            System.out.println("Text Detected");
            index = ca.text.indexOf(a);

            /*if (undoflag == 100) {
                System.out.println("Text Special Case Detected");
                System.out.println("Index value " + index);
                ca.s2.push(e);
                System.out.println(e);
                extra = ca.s1.pop();
                System.out.println(extra);
                //ca.text.set(index, (Text) extra);
                Text m = ca.text.get(index);
                m.x =old.x;
                m.y=old.y;
                ca.text.set(index, m);
                System.out.println("return value x "+ca.text.get(index).x+"return value y "+ca.text.get(index).y);
                System.out.println(ca.text.get(index));
                //ca.s2.push(extra);
                redoflag = 100;
                redoindex = index;
                repaint();
            }*/
            //else
            {
                ca.text.remove((Text) e);
                ca.s2.push(e);
                
            }
            System.out.println(ca.text.size());

            // repaint();
        }
        else if (e.getClass().getSimpleName().equalsIgnoreCase("Pentagon"))
        {
             ca.pent.remove((Pentagon) e);
            ca.s2.push(e);
        }
         else if (e.getClass().getSimpleName().equalsIgnoreCase("Triangle"))
        {
             ca.tri.remove((Triangle) e);
            ca.s2.push(e);
        }
        repaint();
        /*else if (e.getClass().getSimpleName().equalsIgnoreCase("text"))
        {
            ca.text.remove(e);
        }
        ca.s2.push(e);
        repaint();*/

        // TODO add your handling code here:
    }//GEN-LAST:event_btn_undoActionPerformed

    private void btn_textActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_textActionPerformed
        if (btn_text.isSelected()) {
            mode = 7;
            draw =4;
            btn_3d.setSelected(false);
            btn_line.setSelected(false);
            btn_ink.setSelected(false);
            btn_pen.setSelected(false);
            btn_brush.setSelected(false);
            btn_fill.setSelected(false);
            btn_eraser.setSelected(false);
            btn_pentagon.setSelected(false);
            btn_tri.setSelected(false);
            System.out.println("success");
            TextPanel.setVisible(true);
            painttext(g);

        } else {
            mode = 0;
            draw =0;
        }
    }//GEN-LAST:event_btn_textActionPerformed

    private void txt_textActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_textActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_textActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        if(ca.select == 1 && move == 0 && resize == 0)
        {
            Object ob = ca.selected.get(0);
            ca.selected.clear();
            ca.selection.clear();
            ca.s1.push(ob);
            mflag = 1;
            repaint();
            //jTextField1.setText(Integer.toString(ca.selected.size()) + Integer.toString(ca.shapes.size()));
        }
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed


        
        JFileChooser fs = new JFileChooser(new File("C:\\"));
        fs.setDialogTitle("Save Canvas");
        
       fs.showSaveDialog(this);
       if(fs.getSelectedFile()!=null)
       {
           try{
               String paths=fs.getSelectedFile().getPath();
               SaveLoad sv=new SaveLoad();
               sv.save(paths, ca.shapes);
           }catch(ParserConfigurationException | IOException e4)
           {
               Logger.getLogger(paintframe.class.getName()).log(Level.SEVERE, null, ex);
           }
       }
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void btn_selectallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_selectallActionPerformed
        btn_gmove.setEnabled(true);
        btn_gselect.setEnabled(true);
    }//GEN-LAST:event_btn_selectallActionPerformed

    private void btn_gmoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_gmoveActionPerformed
        if(btn_gmove.isSelected())
        {
            btn_gselect.setSelected(false);
            mode = 13;
            draw = 4;
        }
        else
        {
            
            mode = 0;
            draw =0;
        }
// TODO add your handling code here:
    }//GEN-LAST:event_btn_gmoveActionPerformed

    private void btn_gselectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_gselectActionPerformed
        if(btn_gselect.isSelected())
        {
            btn_gmove.setSelected(false);
            mode = 12;
            draw = 4;
        }
        else
        {
            
            mode = 0;
            draw =0;
        }
        
// TODO add your handling code here:
    }//GEN-LAST:event_btn_gselectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(paintframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(paintframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(paintframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new paintframe().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox SizeCombo;
    private javax.swing.JPanel TextPanel;
    private javax.swing.JComboBox TypeCombo;
    private javax.swing.JToggleButton btn_3d;
    private javax.swing.JToggleButton btn_brush;
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_color;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_done;
    private javax.swing.JToggleButton btn_eraser;
    private javax.swing.JToggleButton btn_fill;
    private javax.swing.JToggleButton btn_gmove;
    private javax.swing.JToggleButton btn_gselect;
    private javax.swing.JToggleButton btn_ink;
    private javax.swing.JToggleButton btn_line;
    private javax.swing.JButton btn_load;
    private javax.swing.JButton btn_move;
    private javax.swing.JToggleButton btn_pen;
    private javax.swing.JToggleButton btn_pentagon;
    private javax.swing.JButton btn_redo;
    private javax.swing.JButton btn_resize;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_select;
    private javax.swing.JButton btn_selectall;
    private javax.swing.JToggleButton btn_text;
    private javax.swing.JToggleButton btn_tri;
    private javax.swing.JButton btn_undo;
    private javax.swing.JButton btncircle;
    private javax.swing.JButton btnoval;
    private javax.swing.JButton btnrect;
    private javax.swing.JButton btnsquare;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JLabel lbl_slider;
    private javax.swing.JLabel lbl_value;
    private javax.swing.JSlider slider;
    private javax.swing.JTextField txt_text;
    // End of variables declaration//GEN-END:variables

}
